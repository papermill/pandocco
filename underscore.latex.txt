\begin{verbatim}
Underscore.js 1.4.4
http://underscorejs.org
(c) 2009-2013 Jeremy Ashkenas, DocumentCloud Inc.
Underscore may be freely distributed under the MIT license.
\end{verbatim}

\begin{verbatim}
(function() {

\end{verbatim}

\section{Baseline setup}

Establish the root object, \texttt{window} in the browser, or
\texttt{global} on the server.

\begin{verbatim}
  var root = this;

\end{verbatim}

Save the previous value of the \texttt{\_} variable.

\begin{verbatim}
  var previousUnderscore = root._;

\end{verbatim}

Establish the object that gets returned to break out of a loop
iteration.

\begin{verbatim}
  var breaker = {};

\end{verbatim}

Save bytes in the minified (but not gzipped) version:

\begin{verbatim}
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

\end{verbatim}

Create quick reference variables for speed access to core prototypes.

\begin{verbatim}
  var push             = ArrayProto.push,
      slice            = ArrayProto.slice,
      concat           = ArrayProto.concat,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

\end{verbatim}

All \textbf{ECMAScript 5} native function implementations that we hope
to use are declared here.

\begin{verbatim}
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

\end{verbatim}

Create a safe reference to the Underscore object for use below.

\begin{verbatim}
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

\end{verbatim}

Export the Underscore object for \textbf{Node.js}, with
backwards-compatibility for the old \texttt{require()} API. If we're in
the browser, add \texttt{\_} as a global object via a string identifier,
for Closure Compiler ``advanced'' mode.

\begin{verbatim}
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

\end{verbatim}

Current version.

\begin{verbatim}
  _.VERSION = '1.4.4';

\end{verbatim}

\section{Collection Functions}

The cornerstone, an \texttt{each} implementation, aka \texttt{forEach}.
Handles objects with the built-in \texttt{forEach}, arrays, and raw
objects. Delegates to \textbf{ECMAScript 5}'s native \texttt{forEach} if
available.

\begin{verbatim}
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

\end{verbatim}

Return the results of applying the iterator to each element. Delegates
to \textbf{ECMAScript 5}'s native \texttt{map} if available.

\begin{verbatim}
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results.push(iterator.call(context, value, index, list));
    });
    return results;
  };

  var reduceError = 'Reduce of empty array with no initial value';

\end{verbatim}

\textbf{Reduce} builds up a single result from a list of values, aka
\texttt{inject}, or \texttt{foldl}. Delegates to \textbf{ECMAScript 5}'s
native \texttt{reduce} if available.

\begin{verbatim}
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

\end{verbatim}

The right-associative version of reduce, also known as \texttt{foldr}.
Delegates to \textbf{ECMAScript 5}'s native \texttt{reduceRight} if
available.

\begin{verbatim}
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var length = obj.length;
    if (length !== +length) {
      var keys = _.keys(obj);
      length = keys.length;
    }
    each(obj, function(value, index, list) {
      index = keys ? keys[--length] : --length;
      if (!initial) {
        memo = obj[index];
        initial = true;
      } else {
        memo = iterator.call(context, memo, obj[index], index, list);
      }
    });
    if (!initial) throw new TypeError(reduceError);
    return memo;
  };

\end{verbatim}

Return the first value which passes a truth test. Aliased as
\texttt{detect}.

\begin{verbatim}
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

\end{verbatim}

Return all the elements that pass a truth test. Delegates to
\textbf{ECMAScript 5}'s native \texttt{filter} if available. Aliased as
\texttt{select}.

\begin{verbatim}
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results.push(value);
    });
    return results;
  };

\end{verbatim}

Return all the elements for which a truth test fails.

\begin{verbatim}
  _.reject = function(obj, iterator, context) {
    return _.filter(obj, function(value, index, list) {
      return !iterator.call(context, value, index, list);
    }, context);
  };

\end{verbatim}

Determine whether all of the elements match a truth test. Delegates to
\textbf{ECMAScript 5}'s native \texttt{every} if available. Aliased as
\texttt{all}.

\begin{verbatim}
  _.every = _.all = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

\end{verbatim}

Determine if at least one element in the object matches a truth test.
Delegates to \textbf{ECMAScript 5}'s native \texttt{some} if available.
Aliased as \texttt{any}.

\begin{verbatim}
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

\end{verbatim}

Determine if the array or object contains a given value (using
\texttt{===}). Aliased as \texttt{include}.

\begin{verbatim}
  _.contains = _.include = function(obj, target) {
    if (obj == null) return false;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    return any(obj, function(value) {
      return value === target;
    });
  };

\end{verbatim}

Invoke a method (with arguments) on every item in a collection.

\begin{verbatim}
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      return (isFunc ? method : value[method]).apply(value, args);
    });
  };

\end{verbatim}

Convenience version of a common use case of \texttt{map}: fetching a
property.

\begin{verbatim}
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

\end{verbatim}

Convenience version of a common use case of \texttt{filter}: selecting
only objects containing specific \texttt{key:value} pairs.

\begin{verbatim}
  _.where = function(obj, attrs, first) {
    if (_.isEmpty(attrs)) return first ? void 0 : [];
    return _[first ? 'find' : 'filter'](obj, function(value) {
      for (var key in attrs) {
        if (attrs[key] !== value[key]) return false;
      }
      return true;
    });
  };

\end{verbatim}

Convenience version of a common use case of \texttt{find}: getting the
first object containing specific \texttt{key:value} pairs.

\begin{verbatim}
  _.findWhere = function(obj, attrs) {
    return _.where(obj, attrs, true);
  };

\end{verbatim}

Return the maximum element or (element-based computation). Can't
optimize arrays of integers longer than 65,535 elements. See:
https://bugs.webkit.org/show\_bug.cgi?id=80797

\begin{verbatim}
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.max.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity, value: -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

\end{verbatim}

Return the minimum element (or element-based computation).

\begin{verbatim}
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0] && obj.length < 65535) {
      return Math.min.apply(Math, obj);
    }
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity, value: Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

\end{verbatim}

Shuffle an array.

\begin{verbatim}
  _.shuffle = function(obj) {
    var rand;
    var index = 0;
    var shuffled = [];
    each(obj, function(value) {
      rand = _.random(index++);
      shuffled[index - 1] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

\end{verbatim}

An internal function to generate lookup iterators.

\begin{verbatim}
  var lookupIterator = function(value) {
    return _.isFunction(value) ? value : function(obj){ return obj[value]; };
  };

\end{verbatim}

Sort the object's values by a criterion produced by an iterator.

\begin{verbatim}
  _.sortBy = function(obj, value, context) {
    var iterator = lookupIterator(value);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        index : index,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index < right.index ? -1 : 1;
    }), 'value');
  };

\end{verbatim}

An internal function used for aggregate ``group by'' operations.

\begin{verbatim}
  var group = function(obj, value, context, behavior) {
    var result = {};
    var iterator = lookupIterator(value == null ? _.identity : value);
    each(obj, function(value, index) {
      var key = iterator.call(context, value, index, obj);
      behavior(result, key, value);
    });
    return result;
  };

\end{verbatim}

Groups the object's values by a criterion. Pass either a string
attribute to group by, or a function that returns the criterion.

\begin{verbatim}
  _.groupBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key, value) {
      (_.has(result, key) ? result[key] : (result[key] = [])).push(value);
    });
  };

\end{verbatim}

Counts instances of an object that group by a certain criterion. Pass
either a string attribute to count by, or a function that returns the
criterion.

\begin{verbatim}
  _.countBy = function(obj, value, context) {
    return group(obj, value, context, function(result, key) {
      if (!_.has(result, key)) result[key] = 0;
      result[key]++;
    });
  };

\end{verbatim}

Use a comparator function to figure out the smallest index at which an
object should be inserted so as to maintain order. Uses binary search.

\begin{verbatim}
  _.sortedIndex = function(array, obj, iterator, context) {
    iterator = iterator == null ? _.identity : lookupIterator(iterator);
    var value = iterator.call(context, obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >>> 1;
      iterator.call(context, array[mid]) < value ? low = mid + 1 : high = mid;
    }
    return low;
  };

\end{verbatim}

Safely convert anything iterable into a real, live array.

\begin{verbatim}
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (obj.length === +obj.length) return _.map(obj, _.identity);
    return _.values(obj);
  };

\end{verbatim}

Return the number of elements in an object.

\begin{verbatim}
  _.size = function(obj) {
    if (obj == null) return 0;
    return (obj.length === +obj.length) ? obj.length : _.keys(obj).length;
  };

\end{verbatim}

\section{Array Functions}

Get the first element of an array. Passing \textbf{n} will return the
first N values in the array. Aliased as \texttt{head} and \texttt{take}.
The \textbf{guard} check allows it to work with \texttt{\_.map}.

\begin{verbatim}
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

\end{verbatim}

Returns everything but the last entry of the array. Especially useful on
the arguments object. Passing \textbf{n} will return all the values in
the array, excluding the last N. The \textbf{guard} check allows it to
work with \texttt{\_.map}.

\begin{verbatim}
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

\end{verbatim}

Get the last element of an array. Passing \textbf{n} will return the
last N values in the array. The \textbf{guard} check allows it to work
with \texttt{\_.map}.

\begin{verbatim}
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

\end{verbatim}

Returns everything but the first entry of the array. Aliased as
\texttt{tail} and \texttt{drop}. Especially useful on the arguments
object. Passing an \textbf{n} will return the rest N values in the
array. The \textbf{guard} check allows it to work with \texttt{\_.map}.

\begin{verbatim}
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, (n == null) || guard ? 1 : n);
  };

\end{verbatim}

Trim out all falsy values from an array.

\begin{verbatim}
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

\end{verbatim}

Internal implementation of a recursive \texttt{flatten} function.

\begin{verbatim}
  var flatten = function(input, shallow, output) {
    each(input, function(value) {
      if (_.isArray(value)) {
        shallow ? push.apply(output, value) : flatten(value, shallow, output);
      } else {
        output.push(value);
      }
    });
    return output;
  };

\end{verbatim}

Return a completely flattened version of an array.

\begin{verbatim}
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, []);
  };

\end{verbatim}

Return a version of the array that does not contain the specified
value(s).

\begin{verbatim}
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

\end{verbatim}

Produce a duplicate-free version of the array. If the array has already
been sorted, you have the option of using a faster algorithm. Aliased as
\texttt{unique}.

\begin{verbatim}
  _.uniq = _.unique = function(array, isSorted, iterator, context) {
    if (_.isFunction(isSorted)) {
      context = iterator;
      iterator = isSorted;
      isSorted = false;
    }
    var initial = iterator ? _.map(array, iterator, context) : array;
    var results = [];
    var seen = [];
    each(initial, function(value, index) {
      if (isSorted ? (!index || seen[seen.length - 1] !== value) : !_.contains(seen, value)) {
        seen.push(value);
        results.push(array[index]);
      }
    });
    return results;
  };

\end{verbatim}

Produce an array that contains the union: each distinct element from all
of the passed-in arrays.

\begin{verbatim}
  _.union = function() {
    return _.uniq(concat.apply(ArrayProto, arguments));
  };

\end{verbatim}

Produce an array that contains every item shared between all the
passed-in arrays.

\begin{verbatim}
  _.intersection = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

\end{verbatim}

Take the difference between one array and a number of other arrays. Only
the elements present in just the first array will remain.

\begin{verbatim}
  _.difference = function(array) {
    var rest = concat.apply(ArrayProto, slice.call(arguments, 1));
    return _.filter(array, function(value){ return !_.contains(rest, value); });
  };

\end{verbatim}

Zip together multiple lists into a single array -- elements that share
an index go together.

\begin{verbatim}
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) {
      results[i] = _.pluck(args, "" + i);
    }
    return results;
  };

\end{verbatim}

The inverse operation to \texttt{\_.zip}. If given an array of pairs it
returns an array of the paired elements split into two left and right
element arrays, if given an array of triples it returns a three element
array and so on. For example, \texttt{\_.unzip} given
\texttt{{[}{[}'a',1{]},{[}'b',2{]},{[}'c',3{]}{]}} returns the array
{[}{[}`a',`b',`c'{]},{[}1,2,3{]}{]}.

\begin{verbatim}
  _.unzip = function(tuples) {
      var results = [];
      _.each(tuples, function (tuple, tupleIndex) {
          _.each(tuple, function (value, itemIndex) {
              if (results.length <= itemIndex) {
                  results[itemIndex] = [];
              }
              results[itemIndex][tupleIndex] = value;
          });
      });
      return results;
  };

\end{verbatim}

Converts lists into objects. Pass either a single array of
\texttt{{[}key, value{]}} pairs, or two parallel arrays of the same
length -- one of keys, and one of the corresponding values.

\begin{verbatim}
  _.object = function(list, values) {
    if (list == null) return {};
    var result = {};
    for (var i = 0, l = list.length; i < l; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

\end{verbatim}

If the browser doesn't supply us with indexOf (I'm looking at you,
\textbf{MSIE}), we need this function. Return the position of the first
occurrence of an item in an array, or -1 if the item is not included in
the array. Delegates to \textbf{ECMAScript 5}'s native \texttt{indexOf}
if available. If the array is large and already in sort order, pass
\texttt{true} for \textbf{isSorted} to use binary search.

\begin{verbatim}
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i = 0, l = array.length;
    if (isSorted) {
      if (typeof isSorted == 'number') {
        i = (isSorted < 0 ? Math.max(0, l + isSorted) : isSorted);
      } else {
        i = _.sortedIndex(array, item);
        return array[i] === item ? i : -1;
      }
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item, isSorted);
    for (; i < l; i++) if (array[i] === item) return i;
    return -1;
  };

\end{verbatim}

Delegates to \textbf{ECMAScript 5}'s native \texttt{lastIndexOf} if
available.

\begin{verbatim}
  _.lastIndexOf = function(array, item, from) {
    if (array == null) return -1;
    var hasIndex = from != null;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) {
      return hasIndex ? array.lastIndexOf(item, from) : array.lastIndexOf(item);
    }
    var i = (hasIndex ? from : array.length);
    while (i--) if (array[i] === item) return i;
    return -1;
  };

\end{verbatim}

Generate an integer Array containing an arithmetic progression. A port
of the native Python \texttt{range()} function. See
\href{http://docs.python.org/library/functions.html\#range}{the Python
documentation}.

\begin{verbatim}
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

\end{verbatim}

\section{Function (ahem) Functions}

Reusable constructor function for prototype setting.

\begin{verbatim}
  var ctor = function(){};

\end{verbatim}

Create a function bound to a given object (assigning \texttt{this}, and
arguments, optionally). Delegates to \textbf{ECMAScript 5}'s native
\texttt{Function.bind} if available.

\begin{verbatim}
  _.bind = function(func, context) {
    var args, bound;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      ctor.prototype = null;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

\end{verbatim}

Partially apply a function by creating a version that has had some of
its arguments pre-filled, without changing its dynamic \texttt{this}
context.

\begin{verbatim}
  _.partial = function(func) {
    var args = slice.call(arguments, 1);
    return function() {
      return func.apply(this, args.concat(slice.call(arguments)));
    };
  };

\end{verbatim}

Bind all of an object's methods to that object. Useful for ensuring that
all callbacks defined on an object belong to it.

\begin{verbatim}
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length === 0) throw new Error("bindAll must be passed function names");
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

\end{verbatim}

Memoize an expensive function by storing its results.

\begin{verbatim}
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

\end{verbatim}

Delays a function for the given number of milliseconds, and then calls
it with the arguments supplied.

\begin{verbatim}
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

\end{verbatim}

Defers a function, scheduling it to run after the current call stack has
cleared.

\begin{verbatim}
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

\end{verbatim}

Returns a function, that, when invoked, will only be triggered at most
once during a given window of time.

\begin{verbatim}
  _.throttle = function(func, wait, immediate) {
    var context, args, timeout, result;
    var previous = 0;
    var later = function() {
      previous = new Date;
      timeout = null;
      result = func.apply(context, args);
    };
    return function() {
      var now = new Date;
      if (!previous && immediate === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0) {
        clearTimeout(timeout);
        timeout = null;
        previous = now;
        result = func.apply(context, args);
      } else if (!timeout) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

\end{verbatim}

Returns a function, that, as long as it continues to be invoked, will
not be triggered. The function will be called after it stops being
called for N milliseconds. If \texttt{immediate} is passed, trigger the
function on the leading edge, instead of the trailing.

\begin{verbatim}
  _.debounce = function(func, wait, immediate) {
    var timeout, result;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
      };
      var callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) result = func.apply(context, args);
      return result;
    };
  };

\end{verbatim}

Returns a function that will be executed at most one time, no matter how
often you call it. Useful for lazy initialization.

\begin{verbatim}
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      memo = func.apply(this, arguments);
      func = null;
      return memo;
    };
  };

\end{verbatim}

Returns the first function passed as an argument to the second, allowing
you to adjust arguments, run code before and after, and conditionally
execute the original function.

\begin{verbatim}
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func];
      push.apply(args, arguments);
      return wrapper.apply(this, args);
    };
  };

\end{verbatim}

Returns a function that is the composition of a list of functions, each
consuming the return value of the function that follows.

\begin{verbatim}
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

\end{verbatim}

Returns a function that will only be executed after being called N
times.

\begin{verbatim}
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

\end{verbatim}

\section{Object Functions}

Retrieve the names of an object's properties. Delegates to
\textbf{ECMAScript 5}'s native \texttt{Object.keys}

\begin{verbatim}
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    return keys;
  };

\end{verbatim}

Retrieve the values of an object's properties.

\begin{verbatim}
  _.values = function(obj) {
    var values = [];
    for (var key in obj) if (_.has(obj, key)) values.push(obj[key]);
    return values;
  };

\end{verbatim}

Convert an object into a list of \texttt{{[}key, value{]}} pairs.

\begin{verbatim}
  _.pairs = function(obj) {
    var pairs = [];
    for (var key in obj) if (_.has(obj, key)) pairs.push([key, obj[key]]);
    return pairs;
  };

\end{verbatim}

Invert the keys and values of an object. The values must be
serializable.

\begin{verbatim}
  _.invert = function(obj) {
    var result = {};
    for (var key in obj) if (_.has(obj, key)) result[obj[key]] = key;
    return result;
  };

\end{verbatim}

Return a sorted list of the function names available on the object.
Aliased as \texttt{methods}

\begin{verbatim}
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

\end{verbatim}

Extend a given object with all the properties in passed-in object(s).

\begin{verbatim}
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

\end{verbatim}

Return a copy of the object only containing the whitelisted properties.

\begin{verbatim}
  _.pick = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    each(keys, function(key) {
      if (key in obj) copy[key] = obj[key];
    });
    return copy;
  };

\end{verbatim}

Return a copy of the object without the blacklisted properties.

\begin{verbatim}
  _.omit = function(obj) {
    var copy = {};
    var keys = concat.apply(ArrayProto, slice.call(arguments, 1));
    for (var key in obj) {
      if (!_.contains(keys, key)) copy[key] = obj[key];
    }
    return copy;
  };

\end{verbatim}

Fill in a given object with default properties.

\begin{verbatim}
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      if (source) {
        for (var prop in source) {
          if (obj[prop] === void 0) obj[prop] = source[prop];
        }
      }
    });
    return obj;
  };

\end{verbatim}

Create a (shallow-cloned) duplicate of an object.

\begin{verbatim}
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

\end{verbatim}

Invokes interceptor with the obj, and then returns obj. The primary
purpose of this method is to ``tap into'' a method chain, in order to
perform operations on intermediate results within the chain.

\begin{verbatim}
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

\end{verbatim}

Internal recursive comparison function for \texttt{isEqual}.

\begin{verbatim}
  var eq = function(a, b, aStack, bStack) {
\end{verbatim}

Identical objects are equal. \texttt{0 === -0}, but they aren't
identical. See the Harmony \texttt{egal} proposal:
http://wiki.ecmascript.org/doku.php?id=harmony:egal.

\begin{verbatim}
    if (a === b) return a !== 0 || 1 / a == 1 / b;
\end{verbatim}

A strict comparison is necessary because \texttt{null == undefined}.

\begin{verbatim}
    if (a == null || b == null) return a === b;
\end{verbatim}

Unwrap any wrapped objects.

\begin{verbatim}
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
\end{verbatim}

Compare \texttt{{[}{[}Class{]}{]}} names.

\begin{verbatim}
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
\end{verbatim}

Strings, numbers, dates, and booleans are compared by value.

\begin{verbatim}
      case '[object String]':
\end{verbatim}

Primitives and their corresponding object wrappers are equivalent; thus,
\texttt{"5"} is equivalent to \texttt{new String("5")}.

\begin{verbatim}
        return a == String(b);
      case '[object Number]':
\end{verbatim}

\texttt{NaN}s are equivalent, but non-reflexive. An \texttt{egal}
comparison is performed for other numeric values.

\begin{verbatim}
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
\end{verbatim}

Coerce dates and booleans to numeric primitive values. Dates are
compared by their millisecond representations. Note that invalid dates
with millisecond representations of \texttt{NaN} are not equivalent.

\begin{verbatim}
        return +a == +b;
\end{verbatim}

RegExps are compared by their source patterns and flags.

\begin{verbatim}
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
\end{verbatim}

Assume equality for cyclic structures. The algorithm for detecting
cyclic structures is adapted from ES 5.1 section 15.12.3, abstract
operation \texttt{JO}.

\begin{verbatim}
    var length = aStack.length;
    while (length--) {
\end{verbatim}

Linear search. Performance is inversely proportional to the number of
unique nested structures.

\begin{verbatim}
      if (aStack[length] == a) return bStack[length] == b;
    }
\end{verbatim}

Add the first object to the stack of traversed objects.

\begin{verbatim}
    aStack.push(a);
    bStack.push(b);
    var size = 0, result = true;
\end{verbatim}

Recursively compare objects and arrays.

\begin{verbatim}
    if (className == '[object Array]') {
\end{verbatim}

Compare array lengths to determine if a deep comparison is necessary.

\begin{verbatim}
      size = a.length;
      result = size == b.length;
      if (result) {
\end{verbatim}

Deep compare the contents, ignoring non-numeric properties.

\begin{verbatim}
        while (size--) {
          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
        }
      }
    } else {
\end{verbatim}

Objects with different constructors are not equivalent, but
\texttt{Object}s from different frames are.

\begin{verbatim}
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && (aCtor instanceof aCtor) &&
                               _.isFunction(bCtor) && (bCtor instanceof bCtor))) {
        return false;
      }
\end{verbatim}

Deep compare objects.

\begin{verbatim}
      for (var key in a) {
        if (_.has(a, key)) {
\end{verbatim}

Count the expected number of properties.

\begin{verbatim}
          size++;
\end{verbatim}

Deep compare each member.

\begin{verbatim}
          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
        }
      }
\end{verbatim}

Ensure that both objects contain the same number of properties.

\begin{verbatim}
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
\end{verbatim}

Remove the first object from the stack of traversed objects.

\begin{verbatim}
    aStack.pop();
    bStack.pop();
    return result;
  };

\end{verbatim}

Perform a deep comparison to check if two objects are equal.

\begin{verbatim}
  _.isEqual = function(a, b) {
    return eq(a, b, [], []);
  };

\end{verbatim}

Is a given array, string, or object empty? An ``empty'' object has no
enumerable own-properties.

\begin{verbatim}
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

\end{verbatim}

Is a given value a DOM element?

\begin{verbatim}
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

\end{verbatim}

Is a given value an array? Delegates to ECMA5's native Array.isArray

\begin{verbatim}
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

\end{verbatim}

Is a given variable an object?

\begin{verbatim}
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

\end{verbatim}

Add some isType methods: isArguments, isFunction, isString, isNumber,
isDate, isRegExp.

\begin{verbatim}
  each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) == '[object ' + name + ']';
    };
  });

\end{verbatim}

Define a fallback version of the method in browsers (ahem, IE), where
there isn't any inspectable ``Arguments'' type.

\begin{verbatim}
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

\end{verbatim}

Optimize \texttt{isFunction} if appropriate.

\begin{verbatim}
  if (typeof (/./) !== 'function') {
    _.isFunction = function(obj) {
      return typeof obj === 'function';
    };
  }

\end{verbatim}

Is a given object a finite number?

\begin{verbatim}
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

\end{verbatim}

Is the given value \texttt{NaN}? (NaN is the only number which does not
equal itself).

\begin{verbatim}
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj != +obj;
  };

\end{verbatim}

Is a given value a boolean?

\begin{verbatim}
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

\end{verbatim}

Is a given value equal to null?

\begin{verbatim}
  _.isNull = function(obj) {
    return obj === null;
  };

\end{verbatim}

Is a given variable undefined?

\begin{verbatim}
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

\end{verbatim}

Shortcut function for checking if an object has a given property
directly on itself (in other words, not on a prototype).

\begin{verbatim}
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

\end{verbatim}

\section{Utility Functions}

Run Underscore.js in \emph{noConflict} mode, returning the \texttt{\_}
variable to its previous owner. Returns a reference to the Underscore
object.

\begin{verbatim}
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

\end{verbatim}

Keep the identity function around for default iterators.

\begin{verbatim}
  _.identity = function(value) {
    return value;
  };

\end{verbatim}

Run a function \textbf{n} times.

\begin{verbatim}
  _.times = function(n, iterator, context) {
    var accum = Array(Math.max(0, n));
    for (var i = 0; i < n; i++) accum[i] = iterator.call(context, i);
    return accum;
  };

\end{verbatim}

Return a random integer between min and max (inclusive).

\begin{verbatim}
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

\end{verbatim}

List of HTML entities for escaping.

\begin{verbatim}
  var entityMap = {
    escape: {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#x27;',
      '/': '&#x2F;'
    }
  };
  entityMap.unescape = _.invert(entityMap.escape);

\end{verbatim}

Regexes containing the keys and values listed immediately above.

\begin{verbatim}
  var entityRegexes = {
    escape:   new RegExp('[' + _.keys(entityMap.escape).join('') + ']', 'g'),
    unescape: new RegExp('(' + _.keys(entityMap.unescape).join('|') + ')', 'g')
  };

\end{verbatim}

Functions for escaping and unescaping strings to/from HTML
interpolation.

\begin{verbatim}
  _.each(['escape', 'unescape'], function(method) {
    _[method] = function(string) {
      if (string == null) return '';
      return ('' + string).replace(entityRegexes[method], function(match) {
        return entityMap[method][match];
      });
    };
  });

\end{verbatim}

If the value of the named \texttt{property} is a function then invoke it
with the \texttt{object} as context; otherwise, return it.

\begin{verbatim}
  _.result = function(object, property) {
    if (object == null) return void 0;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

\end{verbatim}

Add your own custom functions to the Underscore object.

\begin{verbatim}
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result.call(this, func.apply(_, args));
      };
    });
  };

\end{verbatim}

Generate a unique integer id (unique within the entire client session).
Useful for temporary DOM ids.

\begin{verbatim}
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

\end{verbatim}

By default, Underscore uses ERB-style template delimiters, change the
following template settings to use alternative delimiters.

\begin{verbatim}
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

\end{verbatim}

When customizing \texttt{templateSettings}, if you don't want to define
an interpolation, evaluation or escaping regex, we need one that is
guaranteed not to match.

\begin{verbatim}
  var noMatch = /(.)^/;

\end{verbatim}

Certain characters need to be escaped so that they can be put into a
string literal.

\begin{verbatim}
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\t':     't',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;

\end{verbatim}

JavaScript micro-templating, similar to John Resig's implementation.
Underscore templating handles arbitrary delimiters, preserves
whitespace, and correctly escapes quotes within interpolated code.

\begin{verbatim}
  _.template = function(text, data, settings) {
    var render;
    settings = _.defaults({}, settings, _.templateSettings);

\end{verbatim}

Combine delimiters into one regular expression via alternation.

\begin{verbatim}
    var matcher = new RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

\end{verbatim}

Compile the template source, escaping string literals appropriately.

\begin{verbatim}
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset)
        .replace(escaper, function(match) { return '\\' + escapes[match]; });

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      }
      if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      }
      if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }
      index = offset + match.length;
      return match;
    });
    source += "';\n";

\end{verbatim}

If a variable is not specified, place data values in local scope.

\begin{verbatim}
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + "return __p;\n";

    try {
      render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

\end{verbatim}

Provide the compiled function source as a convenience for
precompilation.

\begin{verbatim}
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' + source + '}';

    return template;
  };

\end{verbatim}

Add a ``chain'' function, which will delegate to the wrapper.

\begin{verbatim}
  _.chain = function(obj) {
    return _(obj).chain();
  };

\end{verbatim}

\section{OOP}

If Underscore is called as a function, it returns a wrapped object that
can be used OO-style. This wrapper holds altered versions of all the
underscore functions. Wrapped objects may be chained.

Helper function to continue chaining intermediate results.

\begin{verbatim}
  var result = function(obj) {
    return this._chain ? _(obj).chain() : obj;
  };

\end{verbatim}

Add all of the Underscore functions to the wrapper object.

\begin{verbatim}
  _.mixin(_);

\end{verbatim}

Add all mutator Array functions to the wrapper.

\begin{verbatim}
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name == 'shift' || name == 'splice') && obj.length === 0) delete obj[0];
      return result.call(this, obj);
    };
  });

\end{verbatim}

Add all accessor Array functions to the wrapper.

\begin{verbatim}
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result.call(this, method.apply(this._wrapped, arguments));
    };
  });

  _.extend(_.prototype, {

\end{verbatim}

Start chaining a wrapped Underscore object.

\begin{verbatim}
    chain: function() {
      this._chain = true;
      return this;
    },

\end{verbatim}

Extracts the result from a wrapped and chained object.

\begin{verbatim}
    value: function() {
      return this._wrapped;
    }

  });

}).call(this);

\end{verbatim}
